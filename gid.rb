# typed: false
# frozen_string_literal: true

# This file was generated by GoReleaser. DO NOT EDIT.
class Gid < Formula
  desc "Generate Unique IDs"
  homepage "https://github.com/martinsirbe/gid"
  version "0.0.1"

  on_macos do
    url "https://github.com/martinsirbe/genid/releases/download/v0.0.1/gid_0.0.1_darwin_all.tar.gz"
    sha256 "af5d600399233d587e0c603fab332fa75a4f19d3e673eb09434f3434504b91aa"

    def install
      bin.install "gid"
    end
  end

  on_linux do
    if Hardware::CPU.intel? and Hardware::CPU.is_64_bit?
      url "https://github.com/martinsirbe/genid/releases/download/v0.0.1/gid_0.0.1_linux_amd64.tar.gz"
      sha256 "289f851b15481b028eb08a2533066b19df05bdce023951a491912f44f07724d3"
      def install
        bin.install "gid"
      end
    end
    if Hardware::CPU.arm? and Hardware::CPU.is_64_bit?
      url "https://github.com/martinsirbe/genid/releases/download/v0.0.1/gid_0.0.1_linux_arm64.tar.gz"
      sha256 "48838198d0cfc815f773409340170b316d01246d1af0bce05376a262b995622c"
      def install
        bin.install "gid"
      end
    end
  end

  def caveats
    <<~EOS
      Thank you for installing the Unique ID Generator (gid)! Here are some tips to get started:

      ## Usage

      - Run `gid` from any terminal to generate unique identifiers instantly.
      - Specify the ID format using the `-type` flag (e.g. `-type uuid4`, `-type ulid`, etc.).
      - Generate multiple IDs at once using the `-n` flag.
      - For NanoID, you can customise the output length with the `-len` flag.

      ## Supported ID Types

      - `ulid`: Lexicographically sortable identifier
      - `uuid4`: Random UUID
      - `uuid5`: Name-based UUID (SHA-1)
      - `uuid6`: Reordered time-based UUID
      - `uuid7`: Unix epoch time-based UUID
      - `ksuid`: K-Sortable unique ID
      - `xid`: MongoDB-style unique ID
      - `nanoid`: Compact, URL-safe unique ID
      - `snowflake`: Twitter-style time-based ID

      ## Integration Ideas

      - **Shell Scripts**: Use `gid` to generate test IDs or stable primary keys during automation.
      - **Terminals**: Pipe output directly into tools like `jq`, `xargs`, or `pbcopy` for fast development workflows.
      - **Debugging & Prototyping**: Quickly generate realistic IDs in your backend services or data pipelines.

      To learn more about options, run `gid --help` or visit the GitHub repository:
      https://github.com/martinsirbe/gid

      Happy ID generating!
    EOS
  end

  test do
    system "#{bin}/gid", "--help"
  end
end
